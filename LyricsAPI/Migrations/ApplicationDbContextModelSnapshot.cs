// <auto-generated />
using System;
using LyricsAPI.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LyricsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LyricsAPI.Models.Annotation", b =>
                {
                    b.Property<Guid>("AnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnnotationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VerseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnnotationId");

                    b.HasIndex("VerseId")
                        .IsUnique();

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("LyricsAPI.Models.Lyric", b =>
                {
                    b.Property<Guid>("LyricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LyricId");

                    b.HasIndex("SongId");

                    b.ToTable("Lyrics");
                });

            modelBuilder.Entity("LyricsAPI.Models.Song", b =>
                {
                    b.Property<Guid>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SongApiId")
                        .HasColumnType("int");

                    b.Property<string>("SongName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongId");

                    b.HasIndex("SongApiId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("LyricsAPI.Models.Verse", b =>
                {
                    b.Property<Guid>("VerseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Annotated")
                        .HasColumnType("bit");

                    b.Property<Guid>("AnnotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LyricId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VerseId");

                    b.HasIndex("LyricId");

                    b.ToTable("Verses");
                });

            modelBuilder.Entity("LyricsAPI.Models.Annotation", b =>
                {
                    b.HasOne("LyricsAPI.Models.Verse", "Verse")
                        .WithOne("Annotation")
                        .HasForeignKey("LyricsAPI.Models.Annotation", "VerseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("LyricsAPI.Models.Lyric", b =>
                {
                    b.HasOne("LyricsAPI.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("LyricsAPI.Models.Verse", b =>
                {
                    b.HasOne("LyricsAPI.Models.Lyric", "Lyric")
                        .WithMany("Verses")
                        .HasForeignKey("LyricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lyric");
                });

            modelBuilder.Entity("LyricsAPI.Models.Lyric", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("LyricsAPI.Models.Verse", b =>
                {
                    b.Navigation("Annotation");
                });
#pragma warning restore 612, 618
        }
    }
}
